package com.pb.stratus.controller.json.geojson;

import com.mapinfo.midev.service.geometries.v1.*;
import junit.framework.TestCase;
import net.sf.json.JSONException;
import org.junit.After;
import org.junit.Before;
import org.junit.Test;

import java.util.List;

public class GeoJsonParserTest extends TestCase {
    private GeoJsonParser parser;

    private String srsName = "epsg:27700";

    @Before
    public void setUp() {
        parser = new GeoJsonParser(srsName);
    }

    @After
    public void tearDown() {
        parser = null;
    }

    @Test
    public void testParseGeometryExceptions() {
        String jsonString = null;
        try {
            parser.parseGeometry(jsonString);
            fail("JSONException should be thrown");
        } catch (JSONException e) {
            // Expected
        }

        try {
            jsonString = "{}";
            parser.parseGeometry(jsonString);
            fail("JSONException should be thrown");
        } catch (JSONException e) {
            // Expected
        }

        try {
            jsonString = "{\"type\": \"\"}";
            parser.parseGeometry(jsonString);
            fail("JSONException should be thrown");
        } catch (JSONException e) {
            // Expected
        }

        try {
            jsonString = "{\"type\": \"Random\"}";
            parser.parseGeometry(jsonString);
            fail("JSONException should be thrown");
        } catch (JSONException e) {
            // Expected
        }
    }

    @Test
    public void testParseGeometryPoint() {
        String jsonString = "{ \"type\": \"Point\", \"coordinates\": [100.0, 10.0] }";
        Geometry geometry = parser.parseGeometry(jsonString);
        GeometryTestUtil.assertGeometry(geometry, GeometryTestUtil.createPoint(
                this.srsName, 100, 10));
    }

    @Test
    public void testParseGeometryMultiPoint() {
        String jsonString = "{ \"type\": \"MultiPoint\",  \"coordinates\": [ [100.0, 0.0], [101.0, 1.0] ]  }";
        Geometry geometry = parser.parseGeometry(jsonString);

        Point point1 = GeometryTestUtil.createPoint(this.srsName, 100, 0);
        Point point2 = GeometryTestUtil.createPoint(this.srsName, 101, 1);

        MultiPoint multiPoint = GeometryTestUtil.createMultiPoint(this.srsName,
                point1, point2);
        GeometryTestUtil.assertGeometry(geometry, multiPoint);
    }

    @Test
    public void testParseGeometryLineString() {
        String jsonString = "{ \"type\": \"LineString\",  \"coordinates\": [ [100.0, 0.0], [101.0, 1.0] ]  }";
        Geometry geometry = parser.parseGeometry(jsonString);

        Pos pos1 = GeometryTestUtil.createPos(100, 0);
        Pos pos2 = GeometryTestUtil.createPos(101, 1);

        LineString multiPoint = GeometryTestUtil.createLineString(this.srsName,
                pos1, pos2);
        GeometryTestUtil.assertGeometry(geometry, multiPoint);
    }

    @Test
    public void testParseGeometryPlygon() {
        String jsonString = "{ \"type\": \"Polygon\",  \"coordinates\": [    [ [100.0, 0.0], [101.0, 0.0], [101.0, 1.0], [100.0, 1.0], [100.0, 0.0] ],    [ [100.2, 0.2], [100.8, 0.2], [100.8, 0.8], [100.2, 0.8], [100.2, 0.2] ]    ] }";
        Geometry geometry = parser.parseGeometry(jsonString);

        Ring exterior = GeometryTestUtil.createRing(this.srsName,
                100, 0, 101, 0, 101, 1, 100, 1, 100, 0);
        Ring ring = GeometryTestUtil.createRing(this.srsName, 100.2, 0.2, 100.8, 0.2,
                100.8, 0.8, 100.2, 0.8, 100.2, 0.2);
        InteriorList interior = GeometryTestUtil.createInteriorList(ring);
        Polygon polygon = GeometryTestUtil.createPolygon(this.srsName,
                exterior, interior);
        GeometryTestUtil.assertGeometry(geometry, polygon);
    }

    @Test
    public void testParseGeometryMultiPlygon() {
        String jsonString = "{ \"type\": \"MultiPolygon\",  \"coordinates\": [    [[[102.0, 2.0], [103.0, 2.0], [103.0, 3.0], [102.0, 3.0], [102.0, 2.0]]],    [[[100.0, 0.0], [101.0, 0.0], [101.0, 1.0], [100.0, 1.0], [100.0, 0.0]],     [[100.2, 0.2], [100.8, 0.2], [100.8, 0.8], [100.2, 0.8], [100.2, 0.2]]]    ]  }";
        Geometry geometry = parser.parseGeometry(jsonString);

        Ring exterior = GeometryTestUtil.createRing(this.srsName,
                102.0, 2.0, 103.0, 2.0, 103.0, 3.0, 102.0, 3.0, 102.0, 2.0);
        Polygon polygon1 = GeometryTestUtil.createPolygon(this.srsName,
                exterior, new InteriorList());

        Ring exterior1 = GeometryTestUtil.createRing(this.srsName,
                100.0, 0.0, 101.0, 0.0, 101.0, 1.0, 100.0, 1.0, 100.0, 0.0);
        Ring ring2 = GeometryTestUtil.createRing(this.srsName, 100.2, 0.2, 100.8,
                0.2, 100.8, 0.8, 100.2, 0.8, 100.2, 0.2);
        InteriorList interior1 = GeometryTestUtil.createInteriorList(ring2);
        Polygon polygon2 = GeometryTestUtil.createPolygon(this.srsName,
                exterior1, interior1);

        MultiPolygon multiPolygon = GeometryTestUtil.createMultiPolygon(
                this.srsName, polygon1, polygon2);
        GeometryTestUtil.assertGeometry(geometry, multiPolygon);
    }

    /**
     * The purpose of this test is to verify that a Collection geometry is parsed successfully.
     */
    @Test
    public void testParseGeometryCollection_1Square4Circles() {
        String jsonString = "{\"type\":\"GeometryCollection\",\"geometries\":[{\"type\":\"Polygon\",\"coordinates\":[[[16225461.195685,-1912204.5392789],[16225490.935292078,-1912147.6812170255],[16225511.414194753,-1912086.8708727192],[16225522.12813447,-1912023.605598476],[16225522.81329848,-1911959.4431953132],[16225513.452815771,-1911895.9635545393],[16225494.27717249,-1911834.729755587],[16225465.758536616,-1911777.2495778098],[16225428.599131614,-1911724.9383739505],[16225383.713945357,-1911679.084219459],[16225332.208200099,-1911640.8161958002],[16225275.350138225,-1911611.0765887208],[16225214.539793918,-1911590.597686047],[16225151.274519676,-1911579.8837463283],[16225087.112116512,-1911579.1985823184],[16225023.63247574,-1911588.5590650288],[16224962.398676787,-1911607.7347083096],[16224904.91849901,-1911636.2533441829],[16224852.60729515,-1911673.4127491857],[16224806.753140658,-1911718.2979354418],[16224768.485117,-1911769.8036807],[16224738.74550992,-1911826.6617425745],[16224718.266607245,-1911887.4720868808],[16224707.552667528,-1911950.737361124],[16224706.867503518,-1912014.8997642868],[16224716.227986228,-1912078.3794050608],[16224735.40362951,-1912139.613204013],[16224763.922265382,-1912197.0933817902],[16224801.081670385,-1912249.4045856495],[16224845.966856642,-1912295.258740141],[16224897.4726019,-1912333.5267637998],[16224954.330663774,-1912363.2663708793],[16225015.14100808,-1912383.745273553],[16225078.406282322,-1912394.4592132717],[16225142.568685487,-1912395.1443772817],[16225206.04832626,-1912385.7838945712],[16225267.282125212,-1912366.6082512904],[16225324.76230299,-1912338.0896154172],[16225377.073506849,-1912300.9302104143],[16225422.92766134,-1912256.0450241582],[16225461.195685,-1912204.5392789]]]},{\"type\":\"Polygon\",\"coordinates\":[[[16225535.244057,-1912192.5959933],[16225560.658814412,-1912128.5586486873],[16225575.743026238,-1912061.333966071],[16225580.125269124,-1911992.5772402429],[16225573.697637705,-1911923.9814899836],[16225556.6184016,-1911857.2357703203],[16225529.308108283,-1911793.983582388],[16225492.439227814,-1911735.782404975],[16225446.91959439,-1911684.0653442282],[16225393.870052457,-1911640.1058458223],[16225334.596857801,-1911604.986338501],[16225270.559513189,-1911579.5715810899],[16225203.334830573,-1911564.4873692628],[16225134.578104744,-1911560.1051263767],[16225065.982354484,-1911566.5327577954],[16224999.23663482,-1911583.611993901],[16224935.984446889,-1911610.922287218],[16224877.783269476,-1911647.7911676874],[16224826.06620873,-1911693.3108011112],[16224782.106710324,-1911746.3603430432],[16224746.987203002,-1911805.6335377],[16224721.57244559,-1911869.6708823126],[16224706.488233764,-1911936.895564929],[16224702.105990877,-1912005.652290757],[16224708.533622297,-1912074.2480410163],[16224725.612858402,-1912140.9937606796],[16224752.923151718,-1912204.245948612],[16224789.792032188,-1912262.4471260249],[16224835.311665611,-1912314.1641867717],[16224888.361207545,-1912358.1236851776],[16224947.6344022,-1912393.2431924988],[16225011.671746813,-1912418.65794991],[16225078.896429429,-1912433.742161737],[16225147.653155258,-1912438.1244046232],[16225216.248905517,-1912431.6967732045],[16225282.994625181,-1912414.617537099],[16225346.246813113,-1912387.3072437819],[16225404.447990526,-1912350.4383633125],[16225456.165051272,-1912304.9187298887],[16225500.124549678,-1912251.8691879567],[16225535.244057,-1912192.5959933]]]},{\"type\":\"Polygon\",\"coordinates\":[[[16225153.058915,-1912108.9929936],[16225169.481215475,-1912145.6747920758],[16225191.439627701,-1912179.335962953],[16225218.393462695,-1912209.1476564894],[16225249.679027582,-1912234.3758098509],[16225284.525967924,-1912254.399222174],[16225322.0762364,-1912268.7248505938],[16225361.40522078,-1912276.9999505943],[16225401.544510942,-1912279.0207617502],[16225441.505744345,-1912274.7375249842],[16225480.304942802,-1912264.2557078004],[16225516.986741276,-1912247.8334073252],[16225550.647912154,-1912225.874995099],[16225580.45960569,-1912198.9211601063],[16225605.687759051,-1912167.6355952192],[16225625.711171376,-1912132.7886548764],[16225640.036799794,-1912095.2383863993],[16225648.311899796,-1912055.9094020203],[16225650.332710952,-1912015.7701118595],[16225646.049474185,-1911975.8088784562],[16225635.567657001,-1911937.00968],[16225619.145356527,-1911900.327881524],[16225597.1869443,-1911866.6667106468],[16225570.233109307,-1911836.8550171105],[16225538.94754442,-1911811.626863749],[16225504.100604078,-1911791.603451426],[16225466.550335601,-1911777.277823006],[16225427.221351221,-1911769.0027230056],[16225387.08206106,-1911766.9819118497],[16225347.120827656,-1911771.2651486157],[16225308.3216292,-1911781.7469657995],[16225271.639830725,-1911798.1692662747],[16225237.978659848,-1911820.127678501],[16225208.166966312,-1911847.0815134936],[16225182.93881295,-1911878.3670783807],[16225162.915400626,-1911913.2140187235],[16225148.589772208,-1911950.7642872005],[16225140.314672206,-1911990.0932715796],[16225138.29386105,-1912030.2325617403],[16225142.577097816,-1912070.1937951436],[16225153.058915,-1912108.9929936]]]},{\"type\":\"Polygon\",\"coordinates\":[[[16225179.334144,-1912042.1105939],[16225190.374558358,-1912091.6233879016],[16225209.024554336,-1912138.7994959333],[16225234.824907139,-1912182.4772856468],[16225267.140326453,-1912221.5812649014],[16225305.175099408,-1912255.148563949],[16225347.992683662,-1912282.3526444836],[16225394.538768187,-1912302.523651757],[16225443.667233905,-1912315.1649086268],[16225494.16837494,-1912319.9651453947],[16225544.798685601,-1912316.8061643005],[16225594.311479602,-1912305.7657499427],[16225641.487587634,-1912287.115753964],[16225685.165377347,-1912261.315401161],[16225724.269356603,-1912228.9999818464],[16225757.83665565,-1912190.965208892],[16225785.040736184,-1912148.1476246386],[16225805.211743457,-1912101.6015401138],[16225817.853000328,-1912052.4730743961],[16225822.653237095,-1912001.9719333595],[16225819.494256001,-1911951.3416227],[16225808.453841643,-1911901.8288286985],[16225789.803845664,-1911854.6527206667],[16225764.003492862,-1911810.9749309532],[16225731.688073548,-1911771.8709516986],[16225693.653300593,-1911738.3036526511],[16225650.835716339,-1911711.0995721165],[16225604.289631814,-1911690.928564843],[16225555.161166096,-1911678.2873079733],[16225504.66002506,-1911673.4870712054],[16225454.0297144,-1911676.6460522995],[16225404.516920399,-1911687.6864666573],[16225357.340812366,-1911706.336462636],[16225313.663022654,-1911732.136815439],[16225274.559043398,-1911764.4522347536],[16225240.99174435,-1911802.487007708],[16225213.787663817,-1911845.3045919614],[16225193.616656544,-1911891.8506764863],[16225180.975399673,-1911940.979142204],[16225176.175162906,-1911991.4802832406],[16225179.334144,-1912042.1105939]]]},{\"type\":\"Polygon\",\"coordinates\":[[[16225728.725284,-1912261.8670502],[16225360.8720857,-1911296.8495684997],[16224395.854604,-1911664.7027668],[16224763.707802301,-1912629.7202485004],[16225728.725284,-1912261.8670502]]]}]}";
        // Parse geometry
        Geometry geometry = parser.parseGeometry(jsonString);

        // Verify
        assertTrue(geometry instanceof MultiPolygon);
        MultiPolygon multiFeatureGeometry = (MultiPolygon) geometry;
        List<Polygon> polygons = multiFeatureGeometry.getPolygon();
        assertNotNull(multiFeatureGeometry.getPolygon());

        assertEquals(5, polygons.size());
        assertEquals(srsName, multiFeatureGeometry.getSrsName());

        assertTrue(polygons.get(0) instanceof Polygon);
        assertTrue(polygons.get(1) instanceof Polygon);
        assertTrue(polygons.get(2) instanceof Polygon);
        assertTrue(polygons.get(3) instanceof Polygon);
        assertTrue(polygons.get(4) instanceof Polygon);

    }
}
